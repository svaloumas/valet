basePath: /api
consumes:
- application/json
definitions:
  Duration:
    description: |-
      A Duration represents the elapsed time between two instants
      as an int64 nanosecond count. The representation limits the
      largest representable duration to approximately 290 years.
    format: int64
    type: integer
    x-go-package: time
  Job:
    properties:
      completed_at:
        description: CompletedAt is the UTC timestamp of the moment the job finished.
        format: date-time
        type: string
        x-go-name: CompletedAt
      created_at:
        description: CreatedAt is the UTC timestamp of the job creation.
        format: date-time
        type: string
        x-go-name: CreatedAt
      description:
        description: Description gives some information about the job.
        type: string
        x-go-name: Description
      duration:
        $ref: '#/definitions/Duration'
      failure_reason:
        description: FailureReason holds the error message that led to the job failure,
          if any.
        type: string
        x-go-name: FailureReason
      id:
        description: ID is the auto-generated job identifier in UUID4 format.
        type: string
        x-go-name: ID
      name:
        description: Name is the name of the job.
        type: string
        x-go-name: Name
      run_at:
        description: RunAt is the UTC timestamp indicating the time for the job to
          run.
        format: date-time
        type: string
        x-go-name: RunAt
      scheduled_at:
        description: ScheduledAt is the UTC timestamp indicating the time that the
          job got scheduled.
        format: date-time
        type: string
        x-go-name: ScheduledAt
      started_at:
        description: StartedAt is the UTC timestamp of the moment the job started.
        format: date-time
        type: string
        x-go-name: StartedAt
      status:
        $ref: '#/definitions/JobStatus'
      task_name:
        description: TaskName is the name of the task to be executed.
        type: string
        x-go-name: TaskName
      task_params:
        additionalProperties:
          type: object
        description: TaskParams are the required parameters for the task assigned
          to the specific job.
        type: object
        x-go-name: TaskParams
      timeout:
        description: Timeout is the time in seconds after which the job task will
          be interrupted.
        format: int64
        type: integer
        x-go-name: Timeout
    title: Job represents an async task.
    type: object
    x-go-package: valet/internal/core/domain
  JobResult:
    properties:
      error:
        type: string
        x-go-name: Error
      job_id:
        type: string
        x-go-name: JobID
      metadata:
        type: object
        x-go-name: Metadata
    title: JobResult contains the result of a job.
    type: object
    x-go-package: valet/internal/core/domain
  JobStatus:
    format: int64
    title: JobStatus holds a value for job status ranging from 1 to 5.
    type: integer
    x-go-package: valet/internal/core/domain
  RequestBodyDTO:
    properties:
      description:
        type: string
        x-go-name: Description
      name:
        type: string
        x-go-name: Name
      run_at:
        type: string
        x-go-name: RunAt
      task_name:
        type: string
        x-go-name: TaskName
      task_params:
        additionalProperties:
          type: object
        type: object
        x-go-name: TaskParams
      timeout:
        format: int64
        type: integer
        x-go-name: Timeout
    title: RequestBodyDTO is the data transfer object used for a job creation or update.
    type: object
    x-go-package: valet/internal/handler/jobhdl
  errResponse:
    properties:
      code:
        format: int64
        type: integer
        x-go-name: Code
      error:
        type: boolean
        x-go-name: Error
      message:
        type: string
        x-go-name: Message
    type: object
    x-go-package: valet/doc/swagger
host: localhost:8080
info:
  description: Documentation of the valet API.
  title: valet
  version: 0.8.0
paths:
  /jobs:
    post:
      operationId: createJobs
      parameters:
      - description: Name, description and metadata of the new job to be performed.
        in: body
        name: Body
        schema:
          $ref: '#/definitions/RequestBodyDTO'
      responses:
        "202":
          $ref: '#/responses/postJobsResponse'
        "400":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Creates a new job.
      tags:
      - jobs
  /jobs/{id}:
    delete:
      operationId: deleteJob
      parameters:
      - description: The ID of the specified job.
        in: path
        name: id
        required: true
        type: string
        x-go-name: ID
      responses:
        "204":
          description: ""
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Deletes a specified job.
      tags:
      - jobs
    get:
      operationId: getJob
      parameters:
      - description: The ID of the specified job.
        in: path
        name: id
        required: true
        type: string
        x-go-name: ID
      responses:
        "200":
          $ref: '#/responses/getJobResponse'
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Returns a specified job.
      tags:
      - jobs
    patch:
      operationId: patchJob
      parameters:
      - description: The ID of the specified job.
        in: path
        name: id
        required: true
        type: string
        x-go-name: ID
      responses:
        "204":
          description: ""
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Updates a job's name of description.
      tags:
      - jobs
  /jobs/{id}/results:
    delete:
      operationId: deleteJobResults
      parameters:
      - description: The ID of the specified job.
        in: path
        name: id
        required: true
        type: string
        x-go-name: ID
      responses:
        "204":
          description: ""
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Deletes a job's results.
      tags:
      - jobs
    get:
      operationId: getJobResults
      parameters:
      - description: The ID of the specified job.
        in: path
        name: id
        required: true
        type: string
        x-go-name: ID
      responses:
        "200":
          $ref: '#/responses/getJobResultsResponse'
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Returns a specified job's results.
      tags:
      - jobs
  /jobs?status={status}:
    get:
      operationId: getJobs
      parameters:
      - description: The status of the jobs to be fetched..
        in: query
        name: status
        type: string
        x-go-name: Status
      responses:
        "200":
          $ref: '#/responses/getJobsResponse'
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Returns all jobs, optionally filters them by status.
      tags:
      - jobs
produces:
- application/json
responses:
  errorResponse:
    description: The API error response body.
    schema:
      $ref: '#/definitions/errResponse'
  getJobResponse:
    description: The specified job's metadata.
    schema:
      $ref: '#/definitions/Job'
  getJobResultsResponse:
    description: Returns a specified job results.
    schema:
      $ref: '#/definitions/JobResult'
  getJobsResponse:
    description: The jobs metadata.
    schema:
      additionalProperties:
        items:
          $ref: '#/definitions/Job'
        type: array
      type: object
  postJobsResponse:
    description: Returns the newly created job metadata.
    schema:
      $ref: '#/definitions/Job'
schemes:
- http
swagger: "2.0"
