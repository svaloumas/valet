// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: internal/handler/resulthdl/proto/jobresult_service.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobResultClient is the client API for JobResult service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobResultClient interface {
	Get(ctx context.Context, in *GetJobResultRequest, opts ...grpc.CallOption) (*GetJobResultResponse, error)
	Delete(ctx context.Context, in *DeleteJobResultRequest, opts ...grpc.CallOption) (*DeleteJobResultResponse, error)
}

type jobResultClient struct {
	cc grpc.ClientConnInterface
}

func NewJobResultClient(cc grpc.ClientConnInterface) JobResultClient {
	return &jobResultClient{cc}
}

func (c *jobResultClient) Get(ctx context.Context, in *GetJobResultRequest, opts ...grpc.CallOption) (*GetJobResultResponse, error) {
	out := new(GetJobResultResponse)
	err := c.cc.Invoke(ctx, "/jobresult.JobResult/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobResultClient) Delete(ctx context.Context, in *DeleteJobResultRequest, opts ...grpc.CallOption) (*DeleteJobResultResponse, error) {
	out := new(DeleteJobResultResponse)
	err := c.cc.Invoke(ctx, "/jobresult.JobResult/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobResultServer is the server API for JobResult service.
// All implementations must embed UnimplementedJobResultServer
// for forward compatibility
type JobResultServer interface {
	Get(context.Context, *GetJobResultRequest) (*GetJobResultResponse, error)
	Delete(context.Context, *DeleteJobResultRequest) (*DeleteJobResultResponse, error)
	mustEmbedUnimplementedJobResultServer()
}

// UnimplementedJobResultServer must be embedded to have forward compatible implementations.
type UnimplementedJobResultServer struct {
}

func (UnimplementedJobResultServer) Get(context.Context, *GetJobResultRequest) (*GetJobResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedJobResultServer) Delete(context.Context, *DeleteJobResultRequest) (*DeleteJobResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedJobResultServer) mustEmbedUnimplementedJobResultServer() {}

// UnsafeJobResultServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobResultServer will
// result in compilation errors.
type UnsafeJobResultServer interface {
	mustEmbedUnimplementedJobResultServer()
}

func RegisterJobResultServer(s grpc.ServiceRegistrar, srv JobResultServer) {
	s.RegisterService(&JobResult_ServiceDesc, srv)
}

func _JobResult_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobResultServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobresult.JobResult/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobResultServer).Get(ctx, req.(*GetJobResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobResult_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobResultServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobresult.JobResult/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobResultServer).Delete(ctx, req.(*DeleteJobResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobResult_ServiceDesc is the grpc.ServiceDesc for JobResult service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobResult_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jobresult.JobResult",
	HandlerType: (*JobResultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _JobResult_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _JobResult_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/handler/resulthdl/proto/jobresult_service.proto",
}
