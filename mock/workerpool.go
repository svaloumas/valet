// Code generated by MockGen. DO NOT EDIT.
// Source: internal/workerpool/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	domain "valet/internal/core/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockWorkerPool is a mock of WorkerPool interface.
type MockWorkerPool struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerPoolMockRecorder
}

// MockWorkerPoolMockRecorder is the mock recorder for MockWorkerPool.
type MockWorkerPoolMockRecorder struct {
	mock *MockWorkerPool
}

// NewMockWorkerPool creates a new mock instance.
func NewMockWorkerPool(ctrl *gomock.Controller) *MockWorkerPool {
	mock := &MockWorkerPool{ctrl: ctrl}
	mock.recorder = &MockWorkerPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerPool) EXPECT() *MockWorkerPoolMockRecorder {
	return m.recorder
}

// CreateWork mocks base method.
func (m *MockWorkerPool) CreateWork(j *domain.Job) domain.Work {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWork", j)
	ret0, _ := ret[0].(domain.Work)
	return ret0
}

// CreateWork indicates an expected call of CreateWork.
func (mr *MockWorkerPoolMockRecorder) CreateWork(j interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWork", reflect.TypeOf((*MockWorkerPool)(nil).CreateWork), j)
}

// Send mocks base method.
func (m *MockWorkerPool) Send(w domain.Work) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockWorkerPoolMockRecorder) Send(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockWorkerPool)(nil).Send), w)
}

// Start mocks base method.
func (m *MockWorkerPool) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockWorkerPoolMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockWorkerPool)(nil).Start))
}

// Stop mocks base method.
func (m *MockWorkerPool) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockWorkerPoolMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockWorkerPool)(nil).Stop))
}
